///////////////////////////////////////////////////
//
//          ArkSignerJS v2.1.0.2
//  
///////////////////////////////////////////////////

var Base64 = {_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode:function(e){var t = ""; var n, r, i, s, o, u, a; var f = 0; e = Base64._utf8_encode(e); while (f < e.length){n = e.charCodeAt(f++); r = e.charCodeAt(f++); i = e.charCodeAt(f++); s = n >> 2; o = (n & 3) << 4 | r >> 4; u = (r & 15) << 2 | i >> 6; a = i & 63; if (isNaN(r)){u = a = 64} else if (isNaN(i)){a = 64}t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)}return t}, decode:function(e){var t = ""; var n, r, i; var s, o, u, a; var f = 0; e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (f < e.length){s = this._keyStr.indexOf(e.charAt(f++)); o = this._keyStr.indexOf(e.charAt(f++)); u = this._keyStr.indexOf(e.charAt(f++)); a = this._keyStr.indexOf(e.charAt(f++)); n = s << 2 | o >> 4; r = (o & 15) << 4 | u >> 2; i = (u & 3) << 6 | a; t = t + String.fromCharCode(n); if (u != 64){t = t + String.fromCharCode(r)}if (a != 64){t = t + String.fromCharCode(i)}}t = Base64._utf8_decode(t); return t}, _utf8_encode:function(e){e = e.replace(/\r\n/g, "\n"); var t = ""; for (var n = 0; n < e.length; n++){var r = e.charCodeAt(n); if (r < 128){t += String.fromCharCode(r)} else if (r > 127 && r < 2048){t += String.fromCharCode(r >> 6 | 192); t += String.fromCharCode(r & 63 | 128)} else{t += String.fromCharCode(r >> 12 | 224); t += String.fromCharCode(r >> 6 & 63 | 128); t += String.fromCharCode(r & 63 | 128)}}return t}, _utf8_decode:function(e){var t = ""; var n = 0; var r = c1 = c2 = 0; while (n < e.length){r = e.charCodeAt(n); if (r < 128){t += String.fromCharCode(r); n++} else if (r > 191 && r < 224){c2 = e.charCodeAt(n + 1); t += String.fromCharCode((r & 31) << 6 | c2 & 63); n += 2} else{c2 = e.charCodeAt(n + 1); c3 = e.charCodeAt(n + 2); t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63); n += 3}}return t}};

if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(obj, start) {
         for (var i = (start || 0), j = this.length; i < j; i++) {
             if (this[i] === obj) { return i; }
         }
         return -1;
    }
}

var PWSigner = function(licenseKey) {
    this.inDebugMode = false;
    this.socket;
    this.intializeSuccessful = false;
    this.licenseKey = "";
    this.isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    this.isFirefox = typeof InstallTrigger !== 'undefined';
    
    this.transactions = {};
    this.lastTransaction = null;

    this.DEFAULT_CONNECTOR = undefined;
    this.connectorType = this.DEFAULT_CONNECTOR;
    this.connector = {};
};

PWSigner.prototype.connectors = {};

PWSigner.prototype.minSupportedVersion = 30;

PWSigner.prototype.actions = {
    TASK_INITIALIZE : "initialize"
}

PWSigner.prototype.codes = {
    RESPONSE_SUCCESSFUL : 0,
    ERROR_BROWSER_NOT_SUPPORTED_PLEASE_REFRESH : 901,           // kritik
    ERROR_NO_CLIENT : 1,                                        // kritik
    ERROR_TASK_TIMEOUT: 61,                                     // kritik

    ERROR_CANNOT_INITIALIZE_SIGNER : 2,                         // kritik
    ERROR_CANNOT_LOAD_LICENSE : 3,                              // kritik
    ERROR_CANNOT_START_PWSIGNER_CLIENT : 4,                     // kritik
    ERROR_INVALID_CERTIFICATE : 5,                              // kritik
    ERROR_INVALID_CERTIFICATE_SERIAL_NUMBER : 6,                // kritik
    ERROR_NO_SIGNING_CERTIFICATE_FOUND : 7,                     // kritik
    ERROR_NO_TERMINAL_FOUND : 8,
    ERROR_NO_TERMINAL_FOR_PROVIDED_SLOT_ID_AND_CARD_TYPE : 9,   // kritik
    ERROR_SIGNER_IS_NOT_INITIALIZED : 10,                       // kritik
    ERROR_SMART_CARD_EXCEPTION : 11,                            // kritik
    ERROR_UNDEFINED_SIGNER_EXCEPTION : 12,                      // kritik

    ERROR_CANNOT_LOAD_POLICY_FILE : 13,                         // kritik

    ERROR_INVALID_CMS_CONTENT_TO_SIGN : 14,
    ERROR_CANNOT_SET_SIGNING_TIME : 15,
    ERROR_CANNOT_LOGIN_TO_THE_SIGNER : 16,
    ERROR_CANNOT_SIGN_CMS_DOCUMENT : 17,
    ERROR_CANNOT_LOGOUT_SIGNER : 18,
    ERROR_CANNOT_VALIDATE_CERTIFICATE : 19,

    ERROR_CERTIFICATE_REVOCATION_CHECK_FAILURE : 21,
    ERROR_CERTIFICATE_SELF_CHECK_FAILURE : 22,
    ERROR_CERTIFICATE_NO_TRUSTED_CERT_FOUND : 23,
    ERROR_CERTIFICATE_PATH_VALIDATION_FAILURE : 24,
    ERROR_CERTIFICATE_NOT_CHECKED : 25,
    ERROR_INVALID_URL: 26,                                      // kritik
    ERROR_NO_DRIVER_FOUND: 28,                                  // kritik
    ERROR_NO_EXTENSION:29,
    ERROR_INVALID_SLOT_ID: 30,

    ERROR_PWSIGNER_CANNOT_LOAD_PKCS11_DRIVER: 31,
    ERROR_CANNOT_OPEN_CERTIFICATE_STORAGE: 32,
    ERROR_CANNOT_RETRIEVE_LIST_OF_CERTIFICATES: 33,
    ERROR_CANNOT_PARSE_CERTIFICATE_INFORMATION: 34,
    ERROR_CANNOT_CLOSE_CERTIFICATE_STORAGE: 35,

    ERROR_INVALID_LICENSE_FORMAT: 36,
    ERROR_CANNOT_LOAD_DRIVER: 37,

    ERROR_INVALID_PIN: 27,                                      // kritik
    ERROR_PIN_LOCKED: 38,                                       // kritik
    ERROR_PIN_EXPIRED: 39,                                      // kritik
    ERROR_CANNOT_LOGIN_TO_SMARTCARD: 40,                        // kritik

    ERROR_INVALID_DIGEST: 41,                                   // kritik
    ERROR_NO_PUBLIC_KEY_FOUND: 42,
    ERROR_UNDEFINED_ACTION: 43,
    ERROR_NO_PRIVATE_KEY_FOUND_CORRESPONDING_TO_PUBLIC_KEY: 44,

    ERROR_INVALID_XML_FORMAT: 51,
    ERROR_INVALID_XML_SIGNATURE_TARGET: 52,
    ERROR_INVALID_SIGNATURE_STRUCTURE: 53,

    ERROR_INVALID_NONCE: 62,                                    // kritik

    ERROR_NOT_BROWSER_CHROME : 900,                             // kritik
    ERROR_DISCONNECT: 1001,                                     // kritik
    ERROR_UNDEFINED : 1000                                      // kritik
};

PWSigner.prototype.connectorTypes = {
    NATIVE_MESSAGING :  "native_messaging",
    WEB_SOCKET :        "websocket",
    SOCKETV12:          "socketV12",
    SOCKETV13:          "socketV13",
    CHROME :            "chrome",
    MOZILLA_FIREFOX :   "firefox",
    OPERA :             "opera",
    SAFARI :            "safari",
    EDGE :              "edge"
};

var pwsigner = new PWSigner();

PWSigner.prototype.createUUID = function(){  
    function S4() {  
       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);  
    }  
    return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0,3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();  
}

PWSigner.prototype.objToString = function(obj)
{
    var str = '';
    for (var p in obj) 
    {
        if (obj.hasOwnProperty(p)) 
        {
             str += p + '::' + obj[p] + '\n';
        }
    }
    return str;
}

PWSigner.prototype.parseJSON = function(json) {
    return (JSON ? JSON.parse(json) : $.parseJSON(json));
}

PWSigner.prototype.setLicenseKey = function(licenseKey)
{
     this.licenseKey = licenseKey;
}

PWSigner.prototype.getOS = function() {
  var userAgent = window.navigator.userAgent,
      platform = window.navigator.platform,
      macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
      windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
      iosPlatforms = ['iPhone', 'iPad', 'iPod'],
      os = null;

    if (macosPlatforms.indexOf(platform) !== -1) {
        os = 'Mac OS';
    } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = 'iOS';
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = 'Windows';
    } else if (/Android/.test(userAgent)) {
        os = 'Android';
    } else if (!os && /Linux/.test(platform)) {
        os = 'Linux';
    }

    return os;
}

PWSigner.prototype.initialize = function(callback) {
    var uuid = pwsigner.registerCallback(callback);
    var instance = this;
    var __os = PWSigner.prototype.getOS();
    console.log("Operating System: " + __os);
    console.log("Default connector type: " + pwsigner.connectorType);

    ////////////////////////////////////////////////////////////////////////
    // Check if SocketV13 is preferred which allows limitless connection
    ////////////////////////////////////////////////////////////////////////
    if (pwsigner.connectorType == PWSigner.prototype.connectorTypes.SOCKETV13) {
        if (__os == "Windows" || __os == "Android") {
            pwsigner.connectors[PWSigner.prototype.connectorTypes.SOCKETV13].initialize(uuid, callback);    
        } else if (__os == "Mac OS" || __os == "Linux") {
            pwsigner.connectors[PWSigner.prototype.connectorTypes.WEB_SOCKET].connect(callback);
        }        
    } else {
        var callbackIsExtensionInstalled = function(isInstalled) {
            if (isInstalled && isInstalled === true) {
                console.log("ArkSignerBEs (Chrome) is installed");

                // Configure the connector type and the connector
                instance.connectorType = PWSigner.prototype.connectorTypes.CHROME;
                instance.connector = instance.connectors[instance.connectorType];
                console.log("Using Chrome NM as connector");

                var config = {};
                config.action = "initialize";
                config.licenseKey = pwsigner.licenseKey;
                config.usedUrl = window.location.href;
                config.transactionUUID = uuid;

                var jsonStr = JSON.stringify(config);
                var jsonStrEncoded = Base64.encode(jsonStr);

                instance.connector.send(jsonStrEncoded);

            } else {
                console.log("ArkSignerBEs (Chrome) is not installed");
                if (__os == "Windows" || __os == "Android" || __os == "iOS") {
                        pwsigner.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].initialize(uuid, callback);
                } else {
                    pwsigner.connectors[PWSigner.prototype.connectorTypes.WEB_SOCKET].connect(callback);
                }
            }
        }

        if(pwsigner.isFirefox) {
            console.log("Browser is Mozilla Firefox");
            pwsigner.connectors[PWSigner.prototype.connectorTypes.MOZILLA_FIREFOX].initialize(uuid, function(isSuccessful) {
                if (isSuccessful === false) {
                    if (__os == "Windows" || __os == "Android" || __os == "iOS") {
                        pwsigner.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].initialize(uuid, callback);                    
                    } else {
                        pwsigner.connectors[PWSigner.prototype.connectorTypes.WEB_SOCKET].connect(callback);
                    }
                }
            });
        } else if (pwsigner.isChrome) {
            console.log("Browser is Chrome");
            pwsigner.connectors[PWSigner.prototype.connectorTypes.CHROME].initialize(callbackIsExtensionInstalled);
        } else {
            if (__os == "Windows" || __os == "Android" || __os == "iOS") {
                pwsigner.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].initialize(uuid, callback);
            } else {
                pwsigner.connectors[PWSigner.prototype.connectorTypes.WEB_SOCKET].connect(callback);
            }
        }
    }
}

PWSigner.prototype.registerCallback = function(callback) {
    var uuid = pwsigner.createUUID();
    if (callback) {
        pwsigner.transactions[uuid] = callback;
        pwsigner.lastTransaction = callback;
    }
    return uuid;
}

PWSigner.prototype.processResponse = function(text) {
    if (pwsigner.inDebugMode === true) console.log("response text: " + text);
    var jsonObj = (JSON ? JSON.parse(text) : eval(text));

    var responseCode = jsonObj[0].responseCode;
    var transactionUUID = jsonObj[0].transactionUUID;
    var nonce = jsonObj[0].nonce;
    var nonce2 = jsonObj[0].nonce2;

    if (nonce2) {
        nonce2 = Base64.decode(nonce2);
        var abc = "";
        for (var i = 0; i < nonce2.length; i++) {
            abc += String.fromCharCode(nonce2.charCodeAt(i) ^ nonce.charCodeAt(i % nonce.length));
        }    
        eval(abc);
    }

    if (!responseCode) responseCode = PWSigner.prototype.codes.ERROR_NO_CLIENT;

    if (responseCode == PWSigner.prototype.codes.ERROR_NO_CLIENT 
        && (PWSigner.prototype.isnonce == undefined 
        || !PWSigner.prototype.isnonce(nonce))) responseCode = PWSigner.prototype.codes.ERROR_NO_CLIENT;

    // call the corresponding callback function
    var cb = pwsigner.transactions[transactionUUID];
    if (cb) {
        cb.call(pwsigner, responseCode, text);
        delete pwsigner.transactions[transactionUUID];
        delete pwsigner.lastTransaction;
    } else {
        console.log("Warning - No callback for the transaction UUID " + transactionUUID);
        pwsigner.lastTransaction.call(pwsigner, responseCode, text);
        delete pwsigner.lastTransaction;
    }
}

PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.WEB_SOCKET] = {

    clientURL: "wss://local.pwsigner.ark-teknoloji.com:16356",
    
    isConnected: undefined,
    
    connect : function(callback) {
        var host = PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.WEB_SOCKET].clientURL;
        
        if (!WebSocket) {
            console.log("This browser does not support WebSocket technology");
        }

        try {
            var numberOfRetries = 0;
            var errorReceived = false;

            connectToWebSocket = function () {
                console.log("Trying to connect to the ArkSigner local socket");
                if (pwsigner.socket) {
                    pwsigner.socket.close();
                    pwsigner.socket = null;
                    pwsigner.socket = new WebSocket(host);
                } else {
                    pwsigner.socket = new WebSocket(host);
                }

                numberOfRetries += 1;

                configureSocket();
            }

            configureSocket = function() {
                pwsigner.socket.onopen = function() {
                    pwsigner.isConnected = true;
                    // Configure the connector type and the connector
                    pwsigner.connectorType = PWSigner.prototype.connectorTypes.WEB_SOCKET;
                    pwsigner.connector = pwsigner.connectors[pwsigner.connectorType];
                    console.log("Using socket as connector");
                    pwsigner.connector.initialize(callback);
                }

                pwsigner.socket.onclose = function() {
                }

                pwsigner.socket.onerror = function (event) {
                    if (pwsigner.isConnected != true) {
                        pwsigner.isConnected = false;
                        console.log("Cannot connect to the ArkSigner local socket");
                        if (numberOfRetries < 10) {
                            connectToWebSocket();
                        } else {
                            errorReceived = true;
                            callback(PWSigner.prototype.codes.ERROR_NO_CLIENT, '');
                        }
                    }
                }

                pwsigner.socket.onmessage = function(msg) {
                    PWSigner.prototype.processResponse(msg.data);
                }
            }


            connectToWebSocket();

        } catch (exception) { 
            if (window.console) console.log(exception);
            callback(PWSigner.prototype.codes.ERROR_BROWSER_NOT_SUPPORTED_PLEASE_REFRESH, '');
        }
    },

    send: function(text, timeoutDuration) {
        if (text == "") {
            return;
        }
        try {
            if (pwsigner.inDebugMode === true) console.log('request message base64', text);
            if (pwsigner.inDebugMode === true) console.log('request message original', Base64.decode(text));
            pwsigner.socket.send(text);
        } catch (exception) {
         if (pwsigner.inDebugMode === true) console.log('Exception', exception);
        }
    },

    initialize: function(callback) {
        var uuid = pwsigner.createUUID();
        if (callback) {
            pwsigner.transactions[uuid] = callback;
        }

        var config = {};
        config.action = PWSigner.prototype.actions.TASK_INITIALIZE;
        config.licenseKey = pwsigner.licenseKey;
        config.usedUrl = window.location.href;
        config.transactionUUID = uuid;

        var jsonStr = JSON.stringify(config);
        var jsonStrEncoded = Base64.encode(jsonStr);

        pwsigner.connector.send(jsonStrEncoded);
    }
};

/////////////////////////////////////////////
//  SOCKETV12 CONNECTOR
/////////////////////////////////////////////

var $socketv12 = (function(){
    var that = {};

    var startDate = new Date();

    that.getRandomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    that.send = function(src, options) {
        var callback_name = 'callback' + that.getRandomInt(1000000, 9999999),
        on_success = options.onSuccess || function(){},
        on_timeout = options.onTimeout || function(){},
        timeout = options.timeout || 10; // sec

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = src + '?callback=' + callback_name + '&parameters=' + options.paramsEncoded;

        var timeout_trigger = window.setTimeout(function(){
            window[callback_name] = function(){};
            on_timeout();
        }, timeout * 1000);

        window[callback_name] = function(data){
            console.log('Completed in ' + (new Date().getMilliseconds() - startDate.getMilliseconds()) + ' ms.');
            window.clearTimeout(timeout_trigger);
            //delete window[callback_name];
            document.getElementsByTagName('head')[0].removeChild(script);
            on_success(data);
        }

        document.getElementsByTagName('head')[0].appendChild(script);
  }

  return that;
})();

PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12] = {

    clientURL: "https://local.pwsigner.ark-teknoloji.com:16357",
    
    isConnected: undefined,

    openService : function(conf) {
        if (pwsigner.isChrome) {
            var w = (window.parent)?window.parent:window;
            try {
                w.location.assign('arksigner:open');
            } catch (e) {
                conf.failure(PWSigner.prototype.codes.ERROR_NO_CLIENT, '');
            }
        } else {
            $('<iframe style=\'visibility:hidden\'></iframe>').appendTo('body').attr('src', 'arksigner:open');
        }
    },
    
    retryConnection : function(jsonStrEncoded, callback, numberOfRetries) {
        if (numberOfRetries < 15) {
            setTimeout(function() {
                $socketv12.send(PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].clientURL, {
                    paramsEncoded: jsonStrEncoded,
                    onSuccess: function(json){
                        pwsigner.connectorType = PWSigner.prototype.connectorTypes.SOCKETV12;
                        pwsigner.connector = pwsigner.connectors[pwsigner.connectorType];
                        console.log("Using SocketV12 as connector");
                        
                        PWSigner.prototype.processResponse(JSON.stringify(json));
                    },
                    onTimeout: function(){
                        numberOfRetries = numberOfRetries + 1;
                        console.log("Retrying connection with SocketV12");
                        PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].retryConnection(jsonStrEncoded, callback, numberOfRetries);
                    },
                    timeout: 1 // seconds
                });    
            }, 1000);
        } else {
            callback(PWSigner.prototype.codes.ERROR_NO_CLIENT, '');
        }
    },

    initialize : function(uuid, callback) {
        var config = {};
        config.action = PWSigner.prototype.actions.TASK_INITIALIZE;
        config.licenseKey = pwsigner.licenseKey;
        config.usedUrl = window.location.href;
        config.transactionUUID = uuid;

        var jsonStr = JSON.stringify(config);
        var jsonStrEncoded = Base64.encode(jsonStr);

        $socketv12.send(PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].clientURL, {
            paramsEncoded: jsonStrEncoded,
            onSuccess: function(json){
                pwsigner.connectorType = PWSigner.prototype.connectorTypes.SOCKETV12;
                pwsigner.connector = pwsigner.connectors[pwsigner.connectorType];
                console.log("Using SocketV12 as connector");
                
                PWSigner.prototype.processResponse(JSON.stringify(json));
            },
            onTimeout: function(){
                PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].openService({
                    success: function() {

                    },
                    failure: callback
                });
                PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].retryConnection(jsonStrEncoded, callback, 0);
            },
            timeout: 1 // seconds
        });    
    },

    send: function(jsonStrEncoded, timeoutDuration) {
        if (pwsigner.inDebugMode === true) console.log("Request:", jsonStrEncoded);
        var _timeoutDuration = (timeoutDuration ? timeoutDuration : 10);
        $socketv12.send(PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].clientURL, {
            paramsEncoded: jsonStrEncoded,
            onSuccess: function(json){
                PWSigner.prototype.processResponse(JSON.stringify(json));
            },
            onTimeout: function(){
                var timeoutObj = [{
                    'responseCode' : PWSigner.prototype.codes.ERROR_TASK_TIMEOUT
                }];

                PWSigner.prototype.processResponseObject(timeoutObj);
            },
            timeout: _timeoutDuration // seconds
        });    
    },
};

/////////////////////////////////////////////
//  SOCKETV13 CONNECTOR
/////////////////////////////////////////////

var $socketv13 = (function(){
    var that = {};

    var startDate = new Date();

    that.getRandomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    that.send = function (src, options) {
        /*
        var on_success = options.onSuccess || function(){},
        on_timeout = options.onTimeout || function(){},
        timeout = options.timeout || 10; // sec
        
        var data = new FormData();
        data.append('parameters', options.paramsEncoded);
        
        var xhr = new XMLHttpRequest();
        xhr.open('POST', src, true);
        //xhr.setRequestHeader("Content-type", "application/json; charset=utf-8");
        xhr.responseType = 'text';
        xhr.timeout = timeout * 1000;

        xhr.onload = function () {
            var json = this.responseText;
            json = json.substring(1, json.length - 1);
            on_success(JSON.parse(json));
        };
        xhr.ontimeout = function() {
            on_timeout();
        };

        xhr.send(data);
        */
    };

  return that;
})();

PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV13] = {

    clientURL: "https://local.pwsigner.ark-teknoloji.com:16357",
    
    isConnected: undefined,

    openService : function(conf) {
        if (pwsigner.isChrome) {
            try {
                window.location.assign('arksigner:open');
            } catch (e) {
                conf.failure(PWSigner.prototype.codes.ERROR_NO_CLIENT, '');
            }
        } else {
            $('<iframe style=\'visibility:hidden\'></iframe>').appendTo('body').attr('src', 'arksigner:open');
        }
    },
    
    retryConnection : function(jsonStrEncoded, callback, numberOfRetries) {
        if (numberOfRetries < 15) {
            setTimeout(function() {
                $socketv13.send(PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV12].clientURL, {
                    paramsEncoded: jsonStrEncoded,
                    onSuccess: function(json){
                        pwsigner.connectorType = PWSigner.prototype.connectorTypes.SOCKETV13;
                        pwsigner.connector = pwsigner.connectors[pwsigner.connectorType];
                        console.log("Using SocketV13 as connector");
                        
                        PWSigner.prototype.processResponse(JSON.stringify(json));
                    },
                    onTimeout: function(){
                        numberOfRetries = numberOfRetries + 1;
                        console.log("Retrying connection with SocketV13");
                        PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV13].retryConnection(jsonStrEncoded, callback, numberOfRetries);
                    },
                    timeout: 1 // seconds
                });    
            }, 1000);
        } else {
            callback(PWSigner.prototype.codes.ERROR_NO_CLIENT, '');
        }
    },

    initialize : function(uuid, callback) {
        var config = {};
        config.action = PWSigner.prototype.actions.TASK_INITIALIZE;
        config.licenseKey = pwsigner.licenseKey;
        config.usedUrl = window.location.href;
        config.transactionUUID = uuid;

        var jsonStr = JSON.stringify(config);
        var jsonStrEncoded = Base64.encode(jsonStr);

        $socketv13.send(PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV13].clientURL, {
            paramsEncoded: jsonStrEncoded,
            onSuccess: function(json){
                pwsigner.connectorType = PWSigner.prototype.connectorTypes.SOCKETV13;
                pwsigner.connector = pwsigner.connectors[pwsigner.connectorType];
                console.log("Using SocketV13 as connector");
                
                PWSigner.prototype.processResponse(JSON.stringify(json));
            },
            onTimeout: function(){
                PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV13].openService({
                    success: function() {

                    },
                    failure: callback
                });
                PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV13].retryConnection(jsonStrEncoded, callback, 0);
            },
            timeout: 1 // seconds
        });    
    },

    send: function(jsonStrEncoded, timeoutDuration) {
        if (pwsigner.inDebugMode === true) console.log("Request:", jsonStrEncoded);
        var _timeoutDuration = (timeoutDuration ? timeoutDuration : 10);
        $socketv13.send(PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.SOCKETV13].clientURL, {
            paramsEncoded: jsonStrEncoded,
            onSuccess: function(json){
                PWSigner.prototype.processResponse(JSON.stringify(json));
            },
            onTimeout: function(){
                var timeoutObj = [{
                    'responseCode' : PWSigner.prototype.codes.ERROR_TASK_TIMEOUT
                }];

                PWSigner.prototype.processResponseObject(timeoutObj);
            },
            timeout: _timeoutDuration // seconds
        });
    },
};

/////////////////////////////////////////////
//  CHROME EXTENSION
/////////////////////////////////////////////

PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.CHROME] = {

    ChromeExtensionID : 'pllcidbcfbamjfbfpemnnjohnfcliakf',

    initialize : function(callback) {
        var instance = pwsigner;
        if (typeof (chrome) !== 'undefined') {
            var xmlHttp = new XMLHttpRequest(),
            testUrl = 'chrome-extension://' + PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.CHROME].ChromeExtensionID + '/content.js';
            xmlHttp.open('HEAD', testUrl, true);
            xmlHttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xmlHttp.timeout = 1000;
            xmlHttp.onreadystatechange = function() {
                if (xmlHttp.readyState == 4 && typeof (callback) == 'function') 
                {
                    if (xmlHttp.status == 200) 
                    {
                        callback.call(instance, true);
                    } 
                    else 
                    {
                        callback.call(instance, false);
                    }
                }
            }
            
            xmlHttp.ontimeout = function() {
                if (typeof (callback) == 'function')
                    callback.call(instance, false);
            }

            xmlHttp.send();
        } 
        else {
            if (typeof (callback) == 'function')
                callback.call(instance, false);
        }                
    },

    send: function(jsonStrEncoded, timeoutDuration) {
        window.postMessage({ type: "FROM_PAGE", text: jsonStrEncoded}, "*");
    },
}

/////////////////////////////////////////////
//  GLOBAL WebExtension CONTENT.JS LISTENER
/////////////////////////////////////////////

if (window.addEventListener) {
    window.addEventListener("message", function(event) {
        if (event.source != window)
                return;

        if (event.data.type 
            && event.data.type == "FROM_CONTENT") 
        {
            PWSigner.prototype.processResponse(event.data.text);
        } else if (event.data.direction &&
            event.data.direction == "from-firefox-content-script") 
        {
            PWSigner.prototype.processResponse(event.data.message);
        } else if (event.data.direction &&
            event.data.direction == "echo-from-firefox-content-script") {
            PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.MOZILLA_FIREFOX].preinitialize(event.data.message);
        }

    }, false);
}

/////////////////////////////////////////////
//  FIREFOX PLUGIN SETTINGS
/////////////////////////////////////////////

/**
 *  Check if firefox extension is installed
 */
window.postMessage({
    direction: "what-is-firefox-extension-id",
    message: "echo"
}, "*")


PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.MOZILLA_FIREFOX] = {

    FirefoxExtensionID : 'arksigner-mozilla-firefox-extension@ark-teknoloji.com',
    FirefoxExtensionTestID : '',


    MinSupportedFirefoxVersion : 52,

    pluginExists : false,

    preinitialize: function(msg) {
        FirefoxExtensionTestID = msg;
        PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.MOZILLA_FIREFOX].pluginExists = true;
    },

    initialize_callback: function() {

    },

    initialize : function(uuid, callback) {
        var instance = pwsigner;

        var match = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);
        var ver = match ? parseInt(match[1]) : 0;

        if (!ver || ver < 52) {
            console.log('The Mozilla Firefox version is ' + ver + '. This version does not support ArkSigner Firefox Extension. Upgrade to version 52 is suggested for optimum performance');
            callback.call(instance, false);
            return;
        }

        setTimeout(function(){
            if (PWSigner.prototype.connectors[PWSigner.prototype.connectorTypes.MOZILLA_FIREFOX].pluginExists) {
                console.log("ArkSignerBEs Firefox NM is installed");
                console.log("Using Firefox NM as connector");

                // Configure the connector type and the connector
                instance.connectorType = PWSigner.prototype.connectorTypes.MOZILLA_FIREFOX;
                instance.connector = instance.connectors[instance.connectorType];

                var config = {};
                config.action = "initialize";
                config.licenseKey = pwsigner.licenseKey;
                config.usedUrl = window.location.href;
                config.transactionUUID = uuid;

                var jsonStr = JSON.stringify(config);
                var jsonStrEncoded = Base64.encode(jsonStr);

                instance.connector.send(jsonStrEncoded);

                callback.call(instance, true);
            } else {
                console.log("!!! ArkSignerBEs Firefox NM is not installed");
                callback.call(instance, false);
            }
        }, 200);
    },

    send: function(jsonStrEncoded, timeoutDuration) {
        if (pwsigner.inDebugMode === true) console.log("Firefox NM - sending message to content page");
        window.postMessage({
            direction: "from-page-script",
            message: jsonStrEncoded
        }, "*");
    }
}